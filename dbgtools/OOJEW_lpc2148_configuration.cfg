#######################
# daemon configuration
#######################
telnet_port 4444
gdb_port 3333
tcl_port 6666

debug_level 1

###########################
# interface configuration 
###########################
# Olimex ARM-JTAG-EW
# http://www.olimex.com/dev/arm-jtag-ew.html

interface arm-jtag-ew

###########################
# target configuration
###########################

if { [info exists CHIPNAME] } {	
   set  _CHIPNAME $CHIPNAME    
} else {	 
   set  _CHIPNAME lpc2148
}

if { [info exists ENDIAN] } {	
   set  _ENDIAN $ENDIAN    
} else {	 
   set  _ENDIAN little
}

if { [info exists CPUTAPID ] } {
   set _CPUTAPID $CPUTAPID
} else {
  # force an error till we get a good number
   set _CPUTAPID 0x4f1f0f0f
}

#delays on reset lines
jtag_nsrst_delay 1
jtag_ntrst_delay 1

# NOTE!!! LPCs need reset pulled while RTCK is low. 0 to activate 
# JTAG, power-on reset is not enough, i.e. you need to perform a
# reset before being able to talk to the LPC, attach is not
# possible.

#use combined on interfaces or targets that can't set TRST/SRST separately
reset_config trst_and_srst separate trst_push_pull srst_open_drain

jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
target create $_TARGETNAME arm7tdmi -endian $_ENDIAN -chain-position $_TARGETNAME -variant arm7tdmi-s_r4
#LPC2148 has 32K of SDRAM.
$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x40000000 -work-area-size 0x8000 -work-area-backup 0
$_TARGETNAME configure -event reset-init {
	echo "Reset-init event: Force target into ARM reset state."
	soft_reset_halt
	#do not remap 0x0000-0x0020 to anything but the flash
	mwb 0xE01FC040 0x01 
	mdb 0xE01FC040
}

set _FLASHNAME [format "%s.flash" $_CHIPNAME]
#flash bank lpc2000 <base> <size> 0 0 <target#> <variant>
# NOTE: 60000 is internal ARM core running frequency (e.g. 60MHz).
#flash bank lpc2000 0x0 0x7d000 0 0 $_TARGETNAME lpc2000_v2 60000 calc_checksum
# NOTE: 4000 is internal ARM core running frequency (e.g. 4MHz if PLLs are disabled).
#flash bank lpc2000 0x0 0x7d000 0 0 $_TARGETNAME lpc2000_v2 4000 calc_checksum
# NOTE: From LPC23xx User Manual, Chapter 29: CCLK=14.748MHz after POR.
#flash bank lpc2000 0x0 0x7d000 0 0 $_TARGETNAME lpc2000_v2 14748 calc_checksum
#flash bank lpc2000 0x0 0x7d000 0 0 $_TARGETNAME lpc2000_v2 4000 calc_checksum
#flash bank $_FLASHNAME lpc2000 0x0 0x7d000 0 0 $_TARGETNAME lpc2000_v2 60000 calc_checksum
flash bank lpc2000 0x0 0x7d000 0 0 $_TARGETNAME lpc2000_v2 60000 calc_checksum

# Try to use RCLK, if RCLK is not available use "normal" mode. 4MHz / 6 = 666KHz, so use 500.
# ARM rule of thumb Most ARM based systems require an 8:1 division: 500/8=60.
# Try to use RCLK, if RCLK is not available use "normal" mode. 12MHz / 6 = 2MHz, so use 2000.
# ARM rule of thumb Most ARM based systems require an 8:1 division: 2000/8=250.
# ARM rule of thumb Most ARM based systems require an 8:1 division: 500/8=60.
#jtag_khz 500
#jtag_speed 500
jtag_rclk 500

arm7_9 fast_memory_access enable
arm7_9 dcc_downloads enable

gdb_memory_map enable
gdb_flash_program enable
gdb_breakpoint_override hard
gdb_report_data_abort enable

#What to do on daemon start with target.
init
reset init
sleep 100
